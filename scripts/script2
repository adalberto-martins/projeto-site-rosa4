// Substitua pelo ID da sua Google Agenda
const CALENDAR_ID = 'rosaunhascabelo@gmail.com'; 

function doPost(e) {
  // Configura a resposta como JSON
  const headers = { 'Content-Type': 'application/json' };
  
  try {
    // 1. Receber os dados do formulário (POST)
    const data = JSON.parse(e.postData.contents);
    
    const { nome, telefone, servico, data: dataHoraStr, obs } = data;
    
    // Converte a string de data/hora do formulário para um objeto Date
    // Assumimos que o campo 'data' do formulário é um input type="datetime-local" 
    // ou similar que retorna um formato ISO 8601 (ex: YYYY-MM-DDTHH:mm)
    const start = new Date(dataHoraStr);
    
    // Define a duração do evento (ex: 60 minutos = 1 hora)
    // Adapte este valor conforme o seu 'servico'
    const durationMinutes = 60; 
    const end = new Date(start.getTime() + durationMinutes * 60000); // Adiciona 60 minutos
    
    const calendar = CalendarApp.getCalendarById(CALENDAR_ID);
    
    // 2. Verificar a disponibilidade
    const isBusy = calendar.getEvents(start, end).length > 0;
    
    if (isBusy) {
      // Retorna 'busy' se o horário estiver ocupado
      return ContentService.createTextOutput(JSON.stringify({ 
        status: 'busy', 
        message: 'Horário indisponível! Por favor, escolha outro.' 
      })).setMimeType(ContentService.MimeType.JSON);
    }
    
    // 3. Criar o evento na agenda
    const title = `${servico} - ${nome} (${telefone})`;
    const description = `Cliente: ${nome}\nTelefone: ${telefone}\nServiço: ${servico}\nObservação: ${obs}`;
    
    calendar.createEvent(title, start, end, {
      description: description,
      // Se quiser adicionar email para lembretes automáticos do Google Agenda:
      // guests: 'email_do_cliente@exemplo.com' 
    });

    // Retorna 'success' se o agendamento foi criado com sucesso
    return ContentService.createTextOutput(JSON.stringify({ 
      status: 'success', 
      message: 'Agendamento reservado! Finalize a confirmação no WhatsApp.' 
    })).setMimeType(ContentService.MimeType.JSON);

  } catch (error) {
    // Tratamento de erros
    Logger.log(error);
    return ContentService.createTextOutput(JSON.stringify({ 
      status: 'error', 
      message: 'Ocorreu um erro interno no agendamento.' 
    })).setMimeType(ContentService.MimeType.JSON);
  }
}